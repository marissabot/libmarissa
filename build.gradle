buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
}

group = 'org.marissabot.libmarissa'
version = '0.4.0'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    quasar
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'

    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'rocks.xmpp:xmpp-core-client:0.7.1'
    compile 'rocks.xmpp:xmpp-extensions-client:0.7.1'

    compile 'co.paralleluniverse:quasar-core:0.7.2:jdk8'
    quasar 'co.paralleluniverse:quasar-core:0.7.2:jdk8'
}

test {
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}"
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

def conf(String name) {
    if (!System.getenv(name)) {
        if (project.hasProperty(name))
        {
            project.property(name)
        } else {
            ""
        }
    } else {
        System.getenv(name)
    }
}

bintray {
    user = conf('BINTRAY_USER')
    key =  conf('BINTRAY_KEY')

    publications = ['mavenJava']

    dryRun = false // Whether to run this as dry-run, without deploying
    publish = true // If version should be auto published after an upload

    pkg {
        repo = 'maven'
        userOrg = 'marissabot'
        name = 'libmarissa'
        desc = 'Library for Marissa, a Hipchat bot'
        websiteUrl = 'https://github.com/marissabot/libmarissa'
        issueTrackerUrl = 'https://github.com/marissabot/libmarissa/issues'
        vcsUrl = 'https://github.com/marissabot/libmarissa.git'
        licenses = ['LGPL-3.0']
        labels = ['marissa', 'hipchat', 'libmarissa']
        publicDownloadNumbers = true
        version {
            name = project.version
            mavenCentralSync {
                sync = false
            }
        }
    }
}
